{
  // Place your rn-fwk workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Form hook": {
    "scope": "typescript,typescriptreact",
    "prefix": "hookForm",
    "body": [
      "const {control,formState: {errors},handleSubmit,setValue} = useForm$1<{name:string, accept: boolean}>({",
      " defaultValues: {",
      "   name: '',",
      "   accept: false,",
      " },",
      "});"
    ],
    "description": "Use form hook"
  },
  "Theme hook": {
    "scope": "typescript,typescriptreact",
    "prefix": "hookTheme",
    "body": ["const {colors} = useTheme$1();", "const styles = getStyles();"],
    "description": "Use theme hook"
  },
  "Toast hook": {
    "scope": "typescriptreact",
    "prefix": "hookToast",
    "body": ["const {showToast} = useToastApp$1();"],
    "description": "Use toast app hook"
  },
  "GetStyles": {
    "scope": "typescript,typescriptreact",
    "prefix": "getStyles",
    "body": [
      "const getStyles = (colors:Colors$1) => StyleSheet$2.create({",
      "  ${3:name}: {",
      "    ${4:prop}: ${5:value},",
      "  }",
      "});"
    ],
    "description": "Get styles"
  },
  "Service hook": {
    "scope": "typescript,typescriptreact",
    "prefix": "hookService",
    "body": [
      "const {data,error,isLoading,execFn} = useService$1<${2:TResponse}>({",
      "  promiseFn: ${3:() => service()},",
      "  onSuccess: ${4:data => {\\}},//optional",
      "  onError: ${5:error => {\\}},//optional",
      "  executeOnInit: ${6:true},//optional",
      "});"
    ],
    "description": "Use service hook"
  },
  "NetInfo hook": {
    "scope": "typescript,typescriptreact",
    "prefix": "hookNetInfo",
    "body": [
      "const { isConnected } = useNetInfo$1();",
    ],
    "description": "Use netInfo hook"
  },
  "TextStyles hook": {
    "scope": "typescript,typescriptreact",
    "prefix": "hookTextStyles",
    "body": [
      "const { textStyles, colors } = useTextStyles$1();",
    ],
    "description": "Use text styles hook"
  }
}
