{
  // Place your rn-fwk workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "InputText": {
    "scope": "typescriptreact",
    "prefix": "appInputText",
    "body": [
      "<InputTextApp$1",
      " formControl={{ control: control, name: '${2:name}' }}",
      " label={'GenericLabel'}",
      " error={errors.$2?.message}",
      "/>"
    ],
    "description": "InputText component"
  },
  "InputBoolean": {
    "scope": "typescriptreact",
    "prefix": "appInputBoolean",
    "body": [
      "<InputBooleanApp$1",
      " formControl={{ control: control, name: '${2:accept}' }}",
      " label={'GenericLabel'}",
      " error={errors.$2?.message}",
      "/>"
    ],
    "description": "InputBoolean component"
  },
  "InputDate": {
    "scope": "typescriptreact",
    "prefix": "appInputDate",
    "body": [
      "<InputDateApp$1",
      " formControl={{ control: control, name: '${2:date}' }}",
      " label={'GenericLabel'}",
      " error={errors.$2?.message}",
      "/>"
    ],
    "description": "InputDate component"
  },
  "InputSelect": {
    "scope": "typescriptreact",
    "prefix": "appInputSelect",
    "body": [
      "<InputSelectApp$1",
      "  formControl={{ control: control, name: '${2:country}' }}",
      "  label={'Select Label'}",
      "  error={errors.$2?.message}",
      "  selectInput={{",
      "    options: [",
      "      { label: 'Argentina', value: 'Argentina' },",
      "      { label: 'Brasil', value: 'Brasil' },",
      "      //...",
      "    ],",
      "  }}",
      "/>",
    ],
    "description": "InputSelect component"
  },
  "Form": {
    "scope": "typescriptreact",
    "prefix": "appForm",
    "body": [
      "import { StyleSheet, View } from 'react-native'",
      "import React from 'react'",
      "import { FieldValues, useForm } from 'react-hook-form';",
      "import InputTextApp from 'components/forms/inputs/inputText/InputTextApp';",
      "import InputBooleanApp from 'components/forms/inputs/inputBoolean/InputBooleanApp';",
      "import ButtonApp from 'components/buttons/buttonApp/ButtonApp';",
      "",
      "export interface Form${1:Generic}Props extends FieldValues {",
      "  name: string;",
      "  accept: boolean;",
      "}",
      "",
      "interface Props {",
      "  onSubmit: (data: Form${1:Generic}Props) => void;",
      "}",
      "",
      "const Form$1 = (props:Form${1:Generic}Props) => {",
      "  const { control, formState: { errors }, handleSubmit, setValue } = useForm<Form${1:Generic}Props>({",
      "    defaultValues: {",
      "      name: '',",
      "      accept: false,",
      "    },",
      "  });",
      "",
      "",
      "  return (",
      "    <View style={styles.container}>",
      "      <InputTextApp",
      "        formControl={{ control: control, name: 'name' }}",
      "        label={'GenericLabel'}",
      "        error={errors.name?.message}",
      "      />",
      "      <InputBooleanApp",
      "        formControl={{ control: control, name: 'accept' }}",
      "        label={'GenericLabel'}",
      "        error={errors.accept?.message}",
      "      />",
      "      <ButtonApp label={'Submit'} onPress={handleSubmit(onSubmit)} containerStyle={styles.submit} />",
      "    </View>",
      "  )",
      "}",
      "",
      "export default Form$1",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    justifyContent: 'center',",
      "  },",
      "  submit: {",
      "    marginTop: 20,",
      "  },",
      "})"
    ],
    "description": "Form component"
  }
}
